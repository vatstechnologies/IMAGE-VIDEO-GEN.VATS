import streamlit as st
import openai
import os
import requests
from moviepy.editor import ImageClip, concatenate_videoclips
from PIL import Image
from io import BytesIO
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
HYGEN_API_KEY = os.getenv("HYGEN_API_KEY")  # If using Hygen API
ELEVEN_LABS_API_KEY = os.getenv("ELEVEN_LABS_API_KEY")  # If using Eleven Labs

openai.api_key = OPENAI_API_KEY

# Streamlit UI
st.title("🎙️ VatsGenix.AI - Your Personal AI Podcast Generator")
st.write("Generate AI-powered podcast with images and videos.")

# User input
prompt = st.text_input("Enter your podcast topic:")

# Function to generate text using OpenAI GPT
def generate_text(prompt):
    try:
        response = openai.chat.completions.create(
            model="gpt-4",  # Ensure latest OpenAI model
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=500
        )
        return response.choices[0].message.content
    except Exception as e:
        st.error(f"Error generating text: {e}")
        return None

# Function to generate AI Image
def generate_image(img_prompt):
    try:
        response = openai.images.generate(
            model="dall-e-3",  # Latest OpenAI Image model
            prompt=img_prompt,
            size="1024x1024",
            quality="standard",
            n=1
        )
        image_url = response.data[0].url
        return image_url
    except openai.OpenAIError as e:
        st.error(f"Error generating image: {e}")
        return None

# Function to generate audio using Eleven Labs API
def generate_audio(text):
    try:
        url = "https://api.elevenlabs.io/v1/text-to-speech"
        headers = {
            "Authorization": f"Bearer {ELEVEN_LABS_API_KEY}",
            "Content-Type": "application/json"
        }
        data = {
            "text": text,
            "voice": "Adam"  # Change voice if needed
        }
        response = requests.post(url, headers=headers, json=data)
        if response.status_code == 200:
            return response.content
        else:
            st.error("Failed to generate audio.")
            return None
    except Exception as e:
        st.error(f"Audio generation error: {e}")
        return None

# Function to create a video
def create_video(image_url):
    try:
        response = requests.get(image_url)
        img = Image.open(BytesIO(response.content))
        img.save("temp_image.png")

        image_clip = ImageClip("temp_image.png", duration=10)
        video = concatenate_videoclips([image_clip])
        video.write_videofile("output_video.mp4", fps=24)
        
        return "output_video.mp4"
    except Exception as e:
        st.error(f"Video generation error: {e}")
        return None

# Main Process
if prompt:
    st.subheader("🎙️ Generated Podcast Content")
    generated_text = generate_text(prompt)
    
    if generated_text:
        st.write(generated_text)

        # Generate Image
        st.subheader("🖼️ AI-Generated Image")
        image_url = generate_image(prompt)
        if image_url:
            st.image(image_url, caption="Generated by DALL·E")

        # Generate Audio
        st.subheader("🔊 AI Voiceover")
        audio_data = generate_audio(generated_text)
        if audio_data:
            st.audio(audio_data, format="audio/mp3")

        # Create Video
        st.subheader("🎬 AI-Generated Video")
        video_path = create_video(image_url)
        if video_path:
            st.video(video_path)

st.write("Developed by **VatsGenix** 🚀")
